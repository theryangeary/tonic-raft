syntax = "proto3";

package raft;

service Consensus {
  // Invoked by candidates to gather votes
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}

  // Invoked by leader to replicate log entires. Also used as heartbeat
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
}

message RequestVoteRequest {
  // candidate's term
  uint64 term = 1;
  // candidate requesting vote
  uint64 candidate_id = 2;
  // index of candidate’s last log entry
  uint64 last_log_index = 3;
  // term of candidate’s last log entry
  uint64 last_log_term = 4;
}

message RequestVoteResponse {
  // current term, for candidate to update itself
  uint64 term = 1;
  // true means candidate received vote
  bool vote_granted = 2;
}

message AppendEntriesRequest {
  // leader's term
  uint64 term = 1;
  // so follower can redirect clients
  uint64 leader_id = 2;
  // index of log entry immediately preceding new ones
  uint64 prev_log_index = 3;
  // term of prev_log_index entry
  uint64 prev_log_term = 4;
  // log entries to store (empty for heartbeat; may send more than one for efficiency)
  repeated Entry entries = 5;
  // leader's commit_index
  uint64 leader_commit = 6;
}

message AppendEntriesResponse {
  // current_term, for leader to update itself
  uint64 term = 1;
  // true if follower contained entry matching prev_log_index and prev_log_term
  bool success = 2;
}

message Entry {
  // term the entry was created
  uint64 term = 1;
  // binary encoding of consuming application's data
  bytes data = 2;
}
